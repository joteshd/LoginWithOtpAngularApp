{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"digit\"];\nfunction ConfirmOtpComponent_input_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 5);\n    i0.ɵɵlistener(\"keydown\", function ConfirmOtpComponent_input_5_Template_input_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onInput(i_r2, $event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const digit_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", digit_r1);\n  }\n}\nexport class ConfirmOtpComponent {\n  constructor() {\n    this.message = '';\n    this.MESSAGE = 'Please Enter OTP';\n    this.otpLength = 4;\n    this.digits = new Array(this.otpLength);\n    this.otpValidationTime = 30;\n    this.OtpTimeParam = 0;\n    this.otpTimeConfig = timeParameterForOtp.Seconds;\n    this.setTimerForOtp(this.otpValidationTime, this.otpTimeConfig);\n    this.message = timeParameterForOtp[this.otpTimeConfig];\n  }\n  setTimerForOtp(OptValidateForTime, timeParam) {\n    let textSec = \"0\";\n    const prefix = OptValidateForTime < 10 ? \"0\" : \"\";\n    if (timeParam != timeParameterForOtp.days) {\n      var counterTimeForOtp = 0;\n      const milliseconds = (h, m, s) => (h * 60 * 60 + m * 60 + s) * 1000;\n      switch (timeParam) {\n        case timeParameterForOtp.minute:\n          counterTimeForOtp = milliseconds(0, OptValidateForTime, 0);\n          break;\n        case timeParameterForOtp.Seconds:\n          counterTimeForOtp = milliseconds(0, 0, OptValidateForTime);\n          break;\n      }\n      setInterval(() => {\n        if (OptValidateForTime != 0) OptValidateForTime--;\n        this.display = `${prefix}${Math.floor(OptValidateForTime / 60)}:${textSec}`;\n      }, counterTimeForOtp);\n    }\n  }\n  onInput(index, $event) {\n    const ev = $event;\n    const digitInput = this.inputs.get(index).nativeElement;\n    const keyCode = ev.key;\n    // skip paste because it's handled in another method\n    if (ev.metaKey && keyCode === 'v') {\n      return;\n    }\n    if (['Backspace', 'Tab'].indexOf(keyCode) >= 0) {\n      // backspace should delete the current value\n      if (keyCode === 'Backspace' && !digitInput.value) {\n        const el = this.inputs.get(index - 1)?.nativeElement;\n        if (el) {\n          el.value = null;\n        }\n        this.emitChange();\n        el?.focus();\n      }\n      return;\n    }\n    $event.preventDefault();\n    if (Number.isNaN(Number(keyCode))) {\n      return;\n    }\n    digitInput.value = keyCode;\n    this.emitChange();\n    this.inputs.get(index + 1)?.nativeElement.focus();\n  }\n  static #_ = this.ɵfac = function ConfirmOtpComponent_Factory(t) {\n    return new (t || ConfirmOtpComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfirmOtpComponent,\n    selectors: [[\"app-confirm-otp\"]],\n    viewQuery: function ConfirmOtpComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputs = _t);\n      }\n    },\n    decls: 8,\n    vars: 4,\n    consts: [[1, \"container\"], [1, \"wrapper\"], [1, \"message\"], [1, \"input-wrapper\"], [\"type\", \"number\", \"inputmode\", \"numeric\", 3, \"value\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"inputmode\", \"numeric\", 3, \"value\", \"keydown\"]],\n    template: function ConfirmOtpComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtemplate(5, ConfirmOtpComponent_input_5_Template, 1, 1, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.MESSAGE);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.digits);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"Opt will be valid for : \", ctx.display, \" \", ctx.message, \"\");\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    width: 100%;\\n    min-height: 100dvh;\\n    .wrapper {\\n      width: 80%;\\n      margin: auto;\\n      padding: 20vh 0;\\n      .message {\\n        text-align: center;\\n        margin-bottom: 12px;\\n      }\\n      .input-wrapper {\\n        width: 100%;\\n        display: flex;\\n        gap: 16px;\\n        align-items: center;\\n        justify-content: center;\\n        input {\\n          width: 2em;\\n          font-size: 14px;\\n          line-height: 1.5;\\n          text-align: center;\\n        }\\n      }\\n      .results {\\n        text-align: center;\\n        margin-top: 24px;\\n      }\\n    }\\n  }\\n\\n\\n  [_nghost-%COMP%] {\\n    display: block;\\n  }\\n\\n  input[type=\\\"number\\\"][_ngcontent-%COMP%] {\\n    width: 3ch;\\n    height: 3ch;\\n    padding: calc(1ch / 1.5);\\n    text-align: center;\\n    border: 1px solid #545454;\\n    border-radius: 2px;\\n  }\\n\\n  input[type=\\\"text\\\"][_ngcontent-%COMP%]:not(:first-of-type) {\\n    margin-left: calc(1ch / 2);\\n  }\\n\\n  input[type=\\\"text\\\"][_ngcontent-%COMP%]:disabled {\\n    opacity: 0.67;\\n    background-color: rgba(0, 0, 0, 0.1);\\n  }\\n\\n  input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button, input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button {\\n    appearance: none;\\n    margin: 0; \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29uZmlybS1vdHAvY29uZmlybS1vdHAuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEI7TUFDRSxVQUFVO01BQ1YsWUFBWTtNQUNaLGVBQWU7TUFDZjtRQUNFLGtCQUFrQjtRQUNsQixtQkFBbUI7TUFDckI7TUFDQTtRQUNFLFdBQVc7UUFDWCxhQUFhO1FBQ2IsU0FBUztRQUNULG1CQUFtQjtRQUNuQix1QkFBdUI7UUFDdkI7VUFDRSxVQUFVO1VBQ1YsZUFBZTtVQUNmLGdCQUFnQjtVQUNoQixrQkFBa0I7UUFDcEI7TUFDRjtNQUNBO1FBQ0Usa0JBQWtCO1FBQ2xCLGdCQUFnQjtNQUNsQjtJQUNGO0VBQ0Y7OztFQUdBO0lBQ0UsY0FBYztFQUNoQjs7RUFFQTtJQUNFLFVBQVU7SUFDVixXQUFXO0lBQ1gsd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQix5QkFBeUI7SUFDekIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsMEJBQTBCO0VBQzVCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLG9DQUFvQztFQUN0Qzs7RUFFQTs7SUFJRSxnQkFBZ0I7SUFDaEIsU0FBUztBQUNiIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1pbi1oZWlnaHQ6IDEwMGR2aDtcclxuICAgIC53cmFwcGVyIHtcclxuICAgICAgd2lkdGg6IDgwJTtcclxuICAgICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgICBwYWRkaW5nOiAyMHZoIDA7XHJcbiAgICAgIC5tZXNzYWdlIHtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDtcclxuICAgICAgfVxyXG4gICAgICAuaW5wdXQtd3JhcHBlciB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBnYXA6IDE2cHg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBpbnB1dCB7XHJcbiAgICAgICAgICB3aWR0aDogMmVtO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLnJlc3VsdHMge1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBtYXJnaW4tdG9wOiAyNHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgOmhvc3Qge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG5cclxuICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdIHtcclxuICAgIHdpZHRoOiAzY2g7XHJcbiAgICBoZWlnaHQ6IDNjaDtcclxuICAgIHBhZGRpbmc6IGNhbGMoMWNoIC8gMS41KTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM1NDU0NTQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgfVxyXG5cclxuICBpbnB1dFt0eXBlPVwidGV4dFwiXTpub3QoOmZpcnN0LW9mLXR5cGUpIHtcclxuICAgIG1hcmdpbi1sZWZ0OiBjYWxjKDFjaCAvIDIpO1xyXG4gIH1cclxuXHJcbiAgaW5wdXRbdHlwZT1cInRleHRcIl06ZGlzYWJsZWQge1xyXG4gICAgb3BhY2l0eTogMC42NztcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICB9XHJcblxyXG4gIGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiwgXHJcbmlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7IFxyXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcclxuICAgIG1hcmdpbjogMDsgXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}\nexport var timeParameterForOtp;\n(function (timeParameterForOtp) {\n  timeParameterForOtp[timeParameterForOtp[\"minute\"] = 0] = \"minute\";\n  timeParameterForOtp[timeParameterForOtp[\"Seconds\"] = 1] = \"Seconds\";\n  timeParameterForOtp[timeParameterForOtp[\"days\"] = 2] = \"days\";\n})(timeParameterForOtp || (timeParameterForOtp = {}));","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","ConfirmOtpComponent_input_5_Template_input_keydown_0_listener","$event","restoredCtx","ɵɵrestoreView","_r4","i_r2","index","ctx_r3","ɵɵnextContext","ɵɵresetView","onInput","ɵɵelementEnd","ɵɵproperty","digit_r1","ConfirmOtpComponent","constructor","message","MESSAGE","otpLength","digits","Array","otpValidationTime","OtpTimeParam","otpTimeConfig","timeParameterForOtp","Seconds","setTimerForOtp","OptValidateForTime","timeParam","textSec","prefix","days","counterTimeForOtp","milliseconds","h","m","s","minute","setInterval","display","Math","floor","ev","digitInput","inputs","get","nativeElement","keyCode","key","metaKey","indexOf","value","el","emitChange","focus","preventDefault","Number","isNaN","_","_2","selectors","viewQuery","ConfirmOtpComponent_Query","rf","ctx","ɵɵtext","ɵɵtemplate","ConfirmOtpComponent_input_5_Template","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate2"],"sources":["D:\\Assignment\\loginApp\\loginWithOtp\\src\\app\\confirm-otp\\confirm-otp.component.ts","D:\\Assignment\\loginApp\\loginWithOtp\\src\\app\\confirm-otp\\confirm-otp.component.html"],"sourcesContent":["import { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';\n\n@Component({\n  selector: 'app-confirm-otp',\n  templateUrl: './confirm-otp.component.html',\n  styleUrls: ['./confirm-otp.component.css']\n})\nexport class ConfirmOtpComponent {\n  message : string = ''\n  MESSAGE : string = 'Please Enter OTP'\n  otpLength : number = 4;\n  digits : Array<number> = new Array<number>(this.otpLength);\n  otpValidationTime : number = 30;\n  OtpTimeParam : number = 0;\n  otpTimeConfig : timeParameterForOtp;\n  @ViewChildren('digit') inputs: QueryList<ElementRef<HTMLInputElement>>;\n  display : any;\n  constructor(){\n    this.otpTimeConfig = timeParameterForOtp.Seconds;\n    this.setTimerForOtp(this.otpValidationTime,this.otpTimeConfig );\n    this.message = timeParameterForOtp[this.otpTimeConfig];\n  }\n\n  setTimerForOtp(OptValidateForTime : number, timeParam : timeParameterForOtp)\n  {\n    let textSec: any = \"0\";\n    const prefix = OptValidateForTime < 10 ? \"0\" : \"\";\n    if (timeParam!=timeParameterForOtp.days)\n    {\n    var counterTimeForOtp = 0;\n    const milliseconds = (h : number, m : number, s : number) : number => ((h*60*60+m*60+s)*1000);\n\n    switch(timeParam)\n    {\n      case timeParameterForOtp.minute:\n        counterTimeForOtp =  milliseconds(0,OptValidateForTime,0);\n      break\n      case timeParameterForOtp.Seconds:\n        counterTimeForOtp = milliseconds(0,0,OptValidateForTime);\n      break\n    }\n\n    setInterval(()=>{\n      if(OptValidateForTime!=0)\n       OptValidateForTime--;\n\n      this.display = `${prefix}${Math.floor(OptValidateForTime / 60)}:${textSec}`;\n    },counterTimeForOtp);\n  }\n  }\n\n  onInput(index: number, $event: Event) {\n    const ev = $event as KeyboardEvent;\n    const digitInput = this.inputs.get(index).nativeElement;\n    const keyCode = ev.key;\n\n    // skip paste because it's handled in another method\n    if (ev.metaKey && keyCode === 'v') {\n      return;\n    }\n\n    if (['Backspace', 'Tab'].indexOf(keyCode) >= 0) {\n      // backspace should delete the current value\n      if (keyCode === 'Backspace' && !digitInput.value) {\n        const el = this.inputs.get(index - 1)?.nativeElement;\n        if (el) {\n          el.value = null;\n        }\n        this.emitChange();\n        el?.focus();\n      }\n\n      return;\n    }\n\n    $event.preventDefault();\n\n    if (Number.isNaN(Number(keyCode))) {\n      return;\n    }\n\n    digitInput.value = keyCode;\n    this.emitChange();\n    this.inputs.get(index + 1)?.nativeElement.focus();\n  }\n}\n\nexport enum timeParameterForOtp\n{\nminute,\nSeconds,\ndays\n}\n","<div class=\"container\">\n    <div class=\"wrapper\">\n      <h1 class=\"message\">{{ MESSAGE }}</h1>\n      <div class=\"input-wrapper\">\n        <input type=\"number\" \n        *ngFor=\"let digit of digits; let i =index\"\n        inputmode=\"numeric\"\n        [value]=\"digit\"\n        (keydown)=\"onInput(i, $event)\"\n        />\n      </div>\n      <h3>Opt will be valid for : {{ display }} {{ message }}</h3>\n    </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}