{"ast":null,"code":"import { NG_VALIDATORS } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./Services/loginwithotp.service\";\nexport class ValidateUserDirective {\n  constructor(loginWithOtp) {\n    this.loginWithOtp = loginWithOtp;\n    this.UserEmail = '';\n    this.invalidUser = false;\n  }\n  validate(control) {\n    return this.UserEmail ? this.forbiddenNameValidator(this.UserEmail) : null;\n  }\n  forbiddenNameValidator(email) {\n    if (!email) return null;\n    if (email.length === 0) return null;\n    if (this.loginWithOtp.validateUserEmail(email)) return null;else return {\n      invalidUser: {\n        message: 'Entered email address is not regsitered with us. please try with registered email address'\n      }\n    };\n    return null;\n  }\n  static #_ = this.ɵfac = function ValidateUserDirective_Factory(t) {\n    return new (t || ValidateUserDirective)(i0.ɵɵdirectiveInject(i1.LoginwithotpService));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ValidateUserDirective,\n    selectors: [[\"\", \"appValidateUser\", \"\"]],\n    inputs: {\n      UserEmail: [\"appValidateUser\", \"UserEmail\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALIDATORS,\n      useExisting: ValidateUserDirective,\n      multi: true\n    }])]\n  });\n}","map":{"version":3,"names":["NG_VALIDATORS","ValidateUserDirective","constructor","loginWithOtp","UserEmail","invalidUser","validate","control","forbiddenNameValidator","email","length","validateUserEmail","message","_","i0","ɵɵdirectiveInject","i1","LoginwithotpService","_2","selectors","inputs","features","ɵɵProvidersFeature","provide","useExisting","multi"],"sources":["D:\\Assignment\\loginApp\\loginWithOtp\\src\\app\\validate-user.directive.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\nimport { AbstractControl, EmailValidator, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { LoginwithotpService } from './Services/loginwithotp.service';\n\n@Directive({\n  selector: '[appValidateUser]',\n  providers:[{provide: NG_VALIDATORS, useExisting:ValidateUserDirective, multi:true}]\n})\nexport class ValidateUserDirective implements Validator {\n@Input('appValidateUser') UserEmail = '';\ninvalidUser : boolean =  false;\n\n  constructor(private loginWithOtp : LoginwithotpService) { \n\n  }\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this.UserEmail ? this.forbiddenNameValidator(this.UserEmail) : null;\n  }\n  forbiddenNameValidator(email : string) : ValidationErrors | null\n  {\n    if(!email) return null;\n    if(email.length === 0) return null;\n  if(this.loginWithOtp.validateUserEmail(email)) return null\n  else return {\n    invalidUser : {\n      message : 'Entered email address is not regsitered with us. please try with registered email address'\n    }\n  };    \n    return null;\n  }\n}\n"],"mappings":"AACA,SAA0CA,aAAa,QAAqC,gBAAgB;;;AAO5G,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,YAAkC;IAAlC,KAAAA,YAAY,GAAZA,YAAY;IAHR,KAAAC,SAAS,GAAG,EAAE;IACxC,KAAAC,WAAW,GAAc,KAAK;EAI5B;EAEAC,QAAQA,CAACC,OAAwB;IAC/B,OAAO,IAAI,CAACH,SAAS,GAAG,IAAI,CAACI,sBAAsB,CAAC,IAAI,CAACJ,SAAS,CAAC,GAAG,IAAI;EAC5E;EACAI,sBAAsBA,CAACC,KAAc;IAEnC,IAAG,CAACA,KAAK,EAAE,OAAO,IAAI;IACtB,IAAGA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IACpC,IAAG,IAAI,CAACP,YAAY,CAACQ,iBAAiB,CAACF,KAAK,CAAC,EAAE,OAAO,IAAI,MACrD,OAAO;MACVJ,WAAW,EAAG;QACZO,OAAO,EAAG;;KAEb;IACC,OAAO,IAAI;EACb;EAAC,QAAAC,CAAA,G;qBAtBUZ,qBAAqB,EAAAa,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAArBjB,qBAAqB;IAAAkB,SAAA;IAAAC,MAAA;MAAAhB,SAAA;IAAA;IAAAiB,QAAA,GAAAP,EAAA,CAAAQ,kBAAA,CAFtB,CAAC;MAACC,OAAO,EAAEvB,aAAa;MAAEwB,WAAW,EAACvB,qBAAqB;MAAEwB,KAAK,EAAC;IAAI,CAAC,CAAC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}