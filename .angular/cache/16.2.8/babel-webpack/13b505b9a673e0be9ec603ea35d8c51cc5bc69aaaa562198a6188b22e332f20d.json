{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map, throwError, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginwithotpService {\n  constructor(http) {\n    this.http = http;\n    this.endPoint = 'http://localhost:44303';\n  }\n  validateOtp(userOtp) {\n    var userotpvalidation = this.http.get(this.endPoint, {\n      params: new HttpParams().set('top', userOtp)\n    });\n    return true;\n  }\n  validateUserEmail(email) {\n    var user = this.http.get(this.endPoint, {\n      params: new HttpParams().set('UserMail', email)\n    }).pipe(map(response => {\n      return response;\n    }), catchError(error => {\n      console.error(\"Not Vaid User: \", error);\n      return throwError(\"Not Vaid User\");\n    }));\n    return user ? true : false;\n  }\n  static #_ = this.ɵfac = function LoginwithotpService_Factory(t) {\n    return new (t || LoginwithotpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginwithotpService,\n    factory: LoginwithotpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","map","throwError","catchError","LoginwithotpService","constructor","http","endPoint","validateOtp","userOtp","userotpvalidation","get","params","set","validateUserEmail","email","user","pipe","response","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Assignment\\loginApp\\loginWithOtp\\src\\app\\Services\\loginwithotp.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IUser, IUserOtpValidator } from '../ServiceModels/IUser';\nimport { mapToCanActivate } from '@angular/router';\nimport { map,throwError,catchError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginwithotpService {\n\n  private endPoint : string = 'http://localhost:44303';\n  constructor(private http : HttpClient) { }\n \n  validateOtp(userOtp : string) : boolean\n  {\n    var userotpvalidation = this.http.get<IUserOtpValidator>(this.endPoint,{params : new HttpParams().set('top',userOtp)});\n    return true;\n  }\n  validateUserEmail(email :  string){\n\n     var  user =  this.http.get<IUser>(this.endPoint,{params : new HttpParams().set('UserMail', email)})\n     .pipe(\n      map((response : IUser)=> {return response;}),\n      catchError((error: any) => {\n        console.error(\"Not Vaid User: \", error);\n        return throwError(\"Not Vaid User\");\n      })\n     );\n     return user ? true:false;\n  }\n}\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAI7D,SAASC,GAAG,EAACC,UAAU,EAACC,UAAU,QAAQ,MAAM;;;AAKhD,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,QAAQ,GAAY,wBAAwB;EACX;EAEzCC,WAAWA,CAACC,OAAgB;IAE1B,IAAIC,iBAAiB,GAAG,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAoB,IAAI,CAACJ,QAAQ,EAAC;MAACK,MAAM,EAAG,IAAIZ,UAAU,EAAE,CAACa,GAAG,CAAC,KAAK,EAACJ,OAAO;IAAC,CAAC,CAAC;IACtH,OAAO,IAAI;EACb;EACAK,iBAAiBA,CAACC,KAAe;IAE9B,IAAKC,IAAI,GAAI,IAAI,CAACV,IAAI,CAACK,GAAG,CAAQ,IAAI,CAACJ,QAAQ,EAAC;MAACK,MAAM,EAAG,IAAIZ,UAAU,EAAE,CAACa,GAAG,CAAC,UAAU,EAAEE,KAAK;IAAC,CAAC,CAAC,CAClGE,IAAI,CACJhB,GAAG,CAAEiB,QAAgB,IAAG;MAAE,OAAOA,QAAQ;IAAC,CAAC,CAAC,EAC5Cf,UAAU,CAAEgB,KAAU,IAAI;MACxBC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,OAAOjB,UAAU,CAAC,eAAe,CAAC;IACpC,CAAC,CAAC,CACF;IACD,OAAOc,IAAI,GAAG,IAAI,GAAC,KAAK;EAC3B;EAAC,QAAAK,CAAA,G;qBArBUjB,mBAAmB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBtB,mBAAmB;IAAAuB,OAAA,EAAnBvB,mBAAmB,CAAAwB,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}